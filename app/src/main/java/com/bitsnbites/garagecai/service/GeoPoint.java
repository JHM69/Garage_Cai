package com.bitsnbites.garagecai.service;public final class GeoPoint {    private double lat;    private double lon;    public GeoPoint() {    }    public GeoPoint(double lat, double lon) {        this.lat = lat;        this.lon = lon;    }    public GeoPoint reset(double lat, double lon) {        this.lat = lat;        this.lon = lon;        return this;    }    public GeoPoint resetLat(double lat) {        this.lat = lat;        return this;    }    public GeoPoint resetLon(double lon) {        this.lon = lon;        return this;    }    public final double lat() {        return this.lat;    }    public final double getLat() {        return this.lat;    }    public final double lon() {        return this.lon;    }    public final double getLon() {        return this.lon;    }    public static double CalculationByDistance(GeoPoint StartP, GeoPoint EndP) {        double lat1 = StartP.getLat();        double lat2 = EndP.getLat();        double lon1 = StartP.getLon();        double lon2 = EndP.getLon();        return distance(lat1, lon1, lat2, lon2);    }    private static double distance(double lat1, double lon1, double lat2, double lon2) {        double theta = lon1 - lon2;        double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));        dist = Math.acos(dist);        dist = rad2deg(dist);        dist = dist * 60 * 1.1515;        dist = dist * 1.609344;        return (dist);    }    private static double deg2rad(double deg) {        return (deg * Math.PI / 180.0);    }    private static double rad2deg(double rad) {        return (rad * 180.0 / Math.PI);    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        GeoPoint geoPoint = (GeoPoint) o;        if (Double.compare(geoPoint.lat, lat) != 0) return false;        if (Double.compare(geoPoint.lon, lon) != 0) return false;        return true;    }    @Override    public int hashCode() {        int result;        long temp;        temp = lat != +0.0d ? Double.doubleToLongBits(lat) : 0L;        result = (int) (temp ^ (temp >>> 32));        temp = lon != +0.0d ? Double.doubleToLongBits(lon) : 0L;        result = 31 * result + (int) (temp ^ (temp >>> 32));        return result;    }    @Override    public String toString() {        return "[" + lat + ", " + lon + "]";    }}