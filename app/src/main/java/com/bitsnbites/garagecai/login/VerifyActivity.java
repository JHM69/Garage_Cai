package com.bitsnbites.garagecai.login;import android.annotation.SuppressLint;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.app.AppCompatDelegate;import com.bitsnbites.garagecai.Activity.MainActivity;import com.bitsnbites.garagecai.R;import com.bitsnbites.garagecai.model.User;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.FirebaseException;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.PhoneAuthCredential;import com.google.firebase.auth.PhoneAuthProvider;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.firestore.DocumentSnapshot;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.QuerySnapshot;import org.jetbrains.annotations.NotNull;import java.util.Objects;import java.util.concurrent.TimeUnit;public class VerifyActivity extends AppCompatActivity {    ProgressDialog mDialog;    private FirebaseAuth firebaseAuth;    private EditText otpEt;    private String mVerificationId;    private User user;    private final PhoneAuthProvider.OnVerificationStateChangedCallbacks            mCallBack = new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {        @Override        public void onCodeSent(@NotNull String s, @NotNull PhoneAuthProvider.ForceResendingToken forceResendingToken) {            super.onCodeSent(s, forceResendingToken);            mVerificationId = s;            Toast.makeText(VerifyActivity.this, "Message will sent soon, check message.", Toast.LENGTH_LONG).show();        }        @Override        public void onVerificationCompleted(PhoneAuthCredential phoneAuthCredential) {            String code = phoneAuthCredential.getSmsCode();            if (code != null) {                otpEt.setText(code);                verifyCode(code);            }        }        @Override        public void onVerificationFailed(@NonNull FirebaseException e) {            Toast.makeText(VerifyActivity.this, e.getMessage(), Toast.LENGTH_LONG).show();        }    };    @SuppressLint("SetTextI18n")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_verify);        firebaseAuth = FirebaseAuth.getInstance();        TextView showInfo = findViewById(R.id.textView4);        otpEt = findViewById(R.id.editText);        final Button next = findViewById(R.id.button);        mDialog = new ProgressDialog(this);        mDialog.setMessage("Please wait..");        mDialog.setIndeterminate(true);        mDialog.setCancelable(false);        mDialog.setCanceledOnTouchOutside(false);        String number =  (String) getIntent().getStringExtra("number");        sendVerificationCode("+88" + number);        showInfo.setText("Please wait... a verification code will be sent to your number " + number + ". Please put the OTP here when you receive it. You may also receive a call from the verification system. The number from which you will receive the call is your verification code. \n");        next.setOnClickListener(v -> {            String code = otpEt.getText().toString().trim();            if (code.isEmpty() || code.length() < 6) {                otpEt.setError("code must be 6 character long...");                otpEt.requestFocus();                return;            }            try {                verifyCode(code);            } catch (Exception e) {                e.printStackTrace();                Toast.makeText(VerifyActivity.this, "en error occurs. go back and try again", Toast.LENGTH_SHORT).show();            }        });    }    private void verifyCode(String code) {        PhoneAuthCredential credential = PhoneAuthProvider.getCredential(mVerificationId, code);        signInWithCredential(credential);    }    private void signInWithCredential(PhoneAuthCredential credential) {        mDialog.show();        firebaseAuth.signInWithCredential(credential)                .addOnCompleteListener(task -> {                    if (task.isSuccessful()) {                        firebaseAuth = FirebaseAuth.getInstance();                        user.setNumber(firebaseAuth.getCurrentUser().getPhoneNumber());                        user.setUuid(firebaseAuth.getCurrentUser().getUid());                        Toast.makeText(VerifyActivity.this, "Successfully Verified", Toast.LENGTH_SHORT).show();                        Intent intent = new Intent(VerifyActivity.this, MiddleActivity.class);                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);                        FirebaseFirestore.getInstance().collection("Users").document(user.getUuid()).get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {                            @Override                            public void onSuccess(DocumentSnapshot documentSnapshot) {                                if(task.isSuccessful()){                                    user = (User) task.getResult();                                }                                intent.putExtra("user", user);                                mDialog.dismiss();                                startActivity(intent);                                finish();                            }                        });                    } else {                        mDialog.dismiss();                        Toast.makeText(VerifyActivity.this, Objects.requireNonNull(task.getException()).getMessage(), Toast.LENGTH_LONG).show();                    }                });    }    private void sendVerificationCode(String number) {        PhoneAuthProvider.getInstance().verifyPhoneNumber(                number,                     // Phone number to verify                60,                           // Timeout duration                TimeUnit.SECONDS,                // Unit of timeout                VerifyActivity.this,        // Activity (for callback binding)                mCallBack);                      // OnVerificationStateChangedCallbacks    }    @Override    public void onDestroy() {        super.onDestroy();               // Add this line    }}